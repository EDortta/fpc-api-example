FROM ubuntu:22.04

ENV DEBIAN_FRONTEND=noninteractive
ARG TARGETARCH

# RUN echo "185.125.190.83    security.ubuntu.com" >> /etc/hosts
# RUN echo "20.201.28.151     github.com" >> /etc/hosts

RUN apt-get update && apt-get install -y \
    wget sudo git curl unzip \
    fp-compiler fpc-source \
    libpq-dev libmysqlclient-dev firebird-dev

RUN apt-get update && apt-get install -y \
    postgresql-client \
    mysql-client \
    firebird-dev \
    sqlite3 \
    libsqlite3-dev \
    dos2unix apt-utils

# RUN echo -e "nameserver 208.67.222.22\nnameserver 8.8.4.4" | tee /etc/resolv.conf

RUN mkdir -p /opt/downloads

RUN ARCH_DEB_URL="https://github.com/coder/code-server/releases/download/v4.100.2/code-server_4.100.2_${TARGETARCH}.deb" && \
    echo "Downloading $ARCH_DEB_URL" && \
    curl -fsSL "$ARCH_DEB_URL" -o /opt/downloads/code-server.deb

RUN apt-get install -y /opt/downloads/code-server.deb && \
    rm /opt/downloads/code-server.deb

RUN apt-get install -y git fpc libssl-dev

RUN apt-get install -y fp-utils
RUN apt-get install -y cron

RUN wget -qO /tmp/libsagui.tar.gz https://github.com/risoflora/libsagui/releases/download/v3.5.2/libsagui_tls-3.5.2-linux_amd64.tar.gz
RUN mkdir -p /opt/libsagui
RUN tar -xvzf /tmp/libsagui.tar.gz -C /opt/libsagui --strip-components=1
RUN rm /tmp/libsagui.tar.gz
RUN echo "Contents of /opt/libsagui:" && ls -lah /opt/libsagui
RUN echo "Looking for libsagui.so.3..." && find /opt/libsagui -name "libsagui.so.3"
RUN cp $(find /opt/libsagui -name "libsagui.so.3") /usr/lib/
RUN ln -s /usr/lib/libsagui.so.3 /usr/lib/libsagui.so
RUN echo "Final /usr/lib contents:" && ls -lah /usr/lib/
RUN ldconfig

RUN [ -f /usr/lib/libsagui.so.3 ] && ldd /usr/lib/libsagui.so.3 || true

RUN apt-get update && apt-get install -y \
    dnsutils \
    inetutils-ping \
    jq
RUN apt-get install -y \ 
python3.11 \
    python3.11-venv \
    python3.11-dev
RUN apt-get install -y \
    curl && \
    curl -sS https://bootstrap.pypa.io/get-pip.py | python3.11
RUN apt-get install -y \
    rsync
RUN apt-get -y install libcurl4-openssl-dev

RUN apt-get -y install fp-units-base

# Enable OpenSSL legacy provider for PKCS12 compatibility
RUN echo "openssl_conf = openssl_init" >>/etc/ssl/openssl.cnf &&
    echo "" >>/etc/ssl/openssl.cnf &&
    echo "[openssl_init]" >>/etc/ssl/openssl.cnf &&
    echo "providers = provider_sect" >>/etc/ssl/openssl.cnf &&
    echo "" >>/etc/ssl/openssl.cnf &&
    echo "[provider_sect]" >>/etc/ssl/openssl.cnf &&
    echo "default = default_sect" >>/etc/ssl/openssl.cnf &&
    echo "legacy = legacy_sect" >>/etc/ssl/openssl.cnf &&
    echo "" >>/etc/ssl/openssl.cnf &&
    echo "[default_sect]" >>/etc/ssl/openssl.cnf &&
    echo "activate = 1" >>/etc/ssl/openssl.cnf &&
    echo "" >>/etc/ssl/openssl.cnf &&
    echo "[legacy_sect]" >>/etc/ssl/openssl.cnf &&
    echo "activate = 1" >>/etc/ssl/openssl.cnf

RUN rm -rf /var/lib/apt/lists/*

RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1

RUN useradd -m -s /bin/bash developer &&
    echo 'developer:devpassword' | chpasswd &&
    echo 'developer ALL=(ALL) NOPASSWD:ALL' >>/etc/sudoers

WORKDIR /home/developer

EXPOSE 8080

USER developer

RUN mkdir -p .config/code-server
RUN chmod -R 777 .config

COPY .env /usr/local/bin/.env

COPY entry-point.sh /usr/local/bin/entry-point.sh
RUN sudo chmod +x /usr/local/bin/entry-point.sh

ENTRYPOINT ["/usr/local/bin/entry-point.sh"]
